// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scheme-lexical-analyzer.l

/*
Francis J. Patron Fidalgo 802180833 2-1-2021 
Scheme lexical scanner
*/


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class scheme_lex_scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\23\0\1\4\1\5\1\6"+
    "\3\7\1\0\1\10\1\11\1\12\1\13\1\0\1\14"+
    "\1\15\1\16\2\17\6\20\2\21\1\7\1\22\3\7"+
    "\1\23\1\24\32\7\1\0\1\25\1\0\2\7\1\0"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\54\3\0\1\7\6\0\1\3\u02a2\0\2\3"+
    "\u01d6\0\u0100\57";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\3\2\2\1\4\1\5\1\3"+
    "\1\2\1\6\1\2\17\3\1\0\1\7\5\0\1\10"+
    "\3\0\1\11\3\0\2\6\1\0\2\6\5\0\1\12"+
    "\1\13\7\3\1\14\14\3\1\15\3\0\1\6\10\0"+
    "\1\6\4\0\2\6\2\0\2\6\2\0\1\3\1\6"+
    "\2\0\1\6\2\0\1\6\1\0\1\6\13\3\1\14"+
    "\13\3\2\0\1\6\1\0\2\6\11\0\1\6\1\0"+
    "\2\6\6\0\4\6\3\0\1\6\1\0\1\6\2\0"+
    "\2\6\1\0\1\6\4\0\3\6\2\0\12\3\1\14"+
    "\13\3\2\6\3\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\3\6\3\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\3\6\1\0\1\6\1\0\2\6\2\0\1\6"+
    "\1\0\2\6\2\0\1\6\1\0\1\6\4\0\2\6"+
    "\1\0\1\6\21\3\2\6\1\0\1\6\3\0\2\6"+
    "\2\0\2\6\1\0\1\6\2\0\2\6\1\0\2\6"+
    "\1\0\1\6\4\0\2\6\1\0\3\6\2\0\1\6"+
    "\2\3\1\14\12\3\1\6\1\0\2\6\1\0\2\6"+
    "\1\0\1\6\100\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\60"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\300\0\60\0\u04e0\0\u0510\0\u0540"+
    "\0\u0570\0\u05a0\0\60\0\u05d0\0\u0600\0\u0630\0\60\0\u0660"+
    "\0\u0690\0\u06c0\0\u06f0\0\60\0\u0720\0\u0750\0\u0780\0\u07b0"+
    "\0\u07e0\0\u0810\0\u0840\0\u01e0\0\60\0\220\0\u0870\0\u08a0"+
    "\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u02d0\0\u09c0\0\u09f0"+
    "\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70"+
    "\0\u0ba0\0\u0bd0\0\60\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0"+
    "\0\u0cf0\0\u0150\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10"+
    "\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90"+
    "\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\60\0\u1080\0\u10b0\0\u10e0"+
    "\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260"+
    "\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0"+
    "\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560"+
    "\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0"+
    "\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860"+
    "\0\u1890\0\u18c0\0\u18f0\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0"+
    "\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60"+
    "\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u1cb0\0\u1ce0"+
    "\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30\0\u1e60"+
    "\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0"+
    "\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160"+
    "\0\u2190\0\220\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0"+
    "\0\u22e0\0\u2310\0\u2340\0\u2370\0\u23a0\0\u23d0\0\u2400\0\u2430"+
    "\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u2550\0\u2580\0\u25b0"+
    "\0\u25e0\0\u2610\0\u2640\0\u2670\0\u26a0\0\u26d0\0\u2700\0\u2730"+
    "\0\u2760\0\u2790\0\u27c0\0\u27f0\0\u2820\0\u2850\0\u2880\0\u28b0"+
    "\0\u28e0\0\u2910\0\u2940\0\u2970\0\u29a0\0\u29d0\0\u2a00\0\u2a30"+
    "\0\u2a60\0\u2a90\0\u2ac0\0\u2af0\0\u2b20\0\u2b50\0\u2b80\0\u2bb0"+
    "\0\u2be0\0\u2c10\0\u2c40\0\u2c70\0\u2ca0\0\u2cd0\0\u2d00\0\u2d30"+
    "\0\u2d30\0\u2d60\0\u2d90\0\u2dc0\0\u2df0\0\u2e20\0\u2e50\0\u2e80"+
    "\0\u2eb0\0\u2ee0\0\u2f10\0\u2f40\0\u2f70\0\u2fa0\0\u2fd0\0\u3000"+
    "\0\u3030\0\u3060\0\u3090\0\u30c0\0\u30f0\0\u3120\0\u3150\0\u3180"+
    "\0\u31b0\0\u31e0\0\u3210\0\u3240\0\u3270\0\u32a0\0\u32d0\0\u3300"+
    "\0\u3330\0\u3360\0\u3390\0\u33c0\0\u33f0\0\u3420\0\u3450\0\u3480"+
    "\0\u34b0\0\u34e0\0\u3510\0\u3540\0\u3570\0\u35a0\0\u35d0\0\u3600"+
    "\0\u3630\0\u3660\0\u3690\0\u36c0\0\u36f0\0\u3720\0\u3750\0\u3780"+
    "\0\u37b0\0\u37e0\0\u3810\0\u3840\0\u3870\0\u38a0\0\u38d0\0\u3900"+
    "\0\u3930\0\u3960\0\u3990\0\u39c0\0\u39f0\0\u3a20\0\u3a50\0\u3a80"+
    "\0\u3ab0\0\u3ae0\0\u3b10\0\u3b40\0\u3b70\0\u3ba0\0\u3bd0\0\u3c00"+
    "\0\u3c30\0\u3c60\0\u3c90\0\u3cc0\0\u3cf0\0\u3d20\0\u3d50\0\u3d80"+
    "\0\u3db0\0\u3de0\0\u3e10\0\u3e40\0\u3e70\0\u3ea0\0\u3ed0\0\u3f00"+
    "\0\u3f30\0\u3f60\0\u3f90\0\u3fc0\0\u3ff0\0\u4020\0\u4050\0\u4080"+
    "\0\u40b0\0\u40e0\0\u4110\0\u4140\0\u4170\0\u41a0\0\u41d0\0\u4200"+
    "\0\u4230\0\u4260\0\u4290\0\u42c0\0\u42f0\0\u4320\0\u4350\0\u4380"+
    "\0\u43b0\0\u43e0\0\u4410\0\u4440\0\u4470\0\u44a0\0\u44d0\0\u4500"+
    "\0\u4530\0\u4560\0\u4590\0\u45c0\0\u45f0\0\u4620\0\u4650\0\u4680"+
    "\0\u46b0\0\u46e0\0\u4710\0\u4740\0\u4770";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\4\1\7"+
    "\1\10\1\4\2\11\1\12\1\4\3\13\1\14\1\4"+
    "\2\2\1\15\1\16\1\17\1\20\1\21\1\22\2\21"+
    "\1\23\2\21\1\24\1\25\1\26\1\27\1\21\1\30"+
    "\1\21\1\31\1\32\1\33\4\21\1\2\61\0\2\3"+
    "\61\0\1\4\2\0\1\4\2\0\10\4\1\0\1\4"+
    "\2\0\31\4\1\0\5\34\1\35\17\34\1\36\32\34"+
    "\25\0\1\37\1\0\1\40\1\0\1\41\1\42\1\43"+
    "\2\0\1\42\5\0\1\44\4\0\1\43\3\0\1\45"+
    "\6\0\1\46\2\0\1\46\1\0\1\47\1\46\2\50"+
    "\1\51\1\46\4\0\1\46\2\0\31\46\16\0\1\52"+
    "\1\0\3\53\14\0\1\54\36\0\1\55\1\0\3\56"+
    "\44\0\1\57\4\0\2\60\1\56\1\61\3\13\2\0"+
    "\1\62\4\0\3\63\5\0\1\63\6\0\1\63\7\0"+
    "\2\64\1\65\1\0\53\64\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\66\2\0\2\21\1\67\12\21"+
    "\1\70\13\21\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\66\2\0\4\21\1\71\5\21\1\72\16\21"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\66"+
    "\2\0\1\73\15\21\1\74\12\21\5\0\1\4\2\0"+
    "\1\4\2\0\10\4\1\0\1\66\2\0\4\21\1\75"+
    "\11\21\1\76\12\21\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\66\2\0\31\21\5\0\1\4\2\0"+
    "\1\4\2\0\10\4\1\0\1\66\2\0\13\21\1\77"+
    "\15\21\5\0\1\4\2\0\1\4\2\0\10\4\1\0"+
    "\1\66\2\0\5\21\1\76\7\21\1\100\13\21\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\66\2\0"+
    "\1\101\3\21\1\102\11\21\1\103\12\21\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\66\2\0\1\104"+
    "\30\21\5\0\1\4\2\0\1\4\2\0\10\4\1\0"+
    "\1\66\2\0\1\105\30\21\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\66\2\0\21\21\1\76\7\21"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\66"+
    "\2\0\24\21\1\106\4\21\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\66\2\0\2\21\1\107\1\21"+
    "\1\110\24\21\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\66\2\0\7\21\1\111\21\21\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\66\2\0\22\21"+
    "\1\112\6\21\6\0\1\34\17\0\1\34\32\0\57\113"+
    "\7\0\1\114\4\0\2\115\1\116\1\0\1\117\2\120"+
    "\44\0\1\121\4\0\2\122\1\123\1\0\3\13\44\0"+
    "\1\124\4\0\2\122\1\123\1\0\3\13\44\0\1\125"+
    "\4\0\2\126\1\127\1\0\2\130\1\131\44\0\1\132"+
    "\4\0\2\133\1\134\1\0\3\135\4\0\6\136\30\0"+
    "\1\46\2\0\1\46\1\0\1\47\10\46\1\0\1\46"+
    "\2\0\31\46\5\0\1\46\2\0\1\46\1\0\1\47"+
    "\1\46\2\50\1\137\1\46\4\0\1\46\2\0\31\46"+
    "\16\0\1\140\61\0\3\141\44\0\1\142\4\0\2\60"+
    "\1\141\1\143\3\53\2\0\1\62\4\0\3\144\2\0"+
    "\1\54\2\0\1\144\6\0\1\144\24\0\1\145\50\0"+
    "\1\146\4\0\2\60\2\0\3\56\2\0\1\62\4\0"+
    "\3\63\5\0\1\63\6\0\1\63\15\0\1\57\4\0"+
    "\2\60\1\146\1\61\5\0\1\62\4\0\3\63\5\0"+
    "\1\63\6\0\1\63\24\0\1\147\1\0\3\150\14\0"+
    "\1\54\40\0\3\151\51\0\2\152\1\153\1\0\3\154"+
    "\51\0\2\155\2\0\3\156\42\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\66\2\0\2\21\1\157\26\21"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\66"+
    "\2\0\3\21\1\76\25\21\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\66\2\0\6\21\1\160\22\21"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\66"+
    "\2\0\17\21\1\161\11\21\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\66\2\0\22\21\1\162\6\21"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\66"+
    "\2\0\15\21\1\163\13\21\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\66\2\0\2\21\1\164\2\21"+
    "\1\165\5\21\1\166\15\21\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\66\2\0\24\21\1\167\4\21"+
    "\5\0\1\4\2\0\1\4\2\0\2\4\1\170\5\4"+
    "\1\0\1\66\2\0\31\21\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\66\2\0\14\21\1\171\14\21"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\66"+
    "\2\0\23\21\1\172\5\21\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\66\2\0\2\21\1\173\26\21"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\66"+
    "\2\0\2\21\1\174\7\21\1\175\16\21\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\66\2\0\14\21"+
    "\1\176\14\21\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\66\2\0\1\177\15\21\1\200\12\21\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\66\2\0"+
    "\16\21\1\201\12\21\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\66\2\0\20\21\1\202\2\21\1\203"+
    "\5\21\5\0\1\4\2\0\1\4\2\0\10\4\1\0"+
    "\1\66\2\0\4\21\1\204\24\21\5\0\1\4\2\0"+
    "\1\4\2\0\10\4\1\0\1\66\2\0\10\21\1\205"+
    "\20\21\33\0\1\206\3\0\1\206\36\0\1\207\1\0"+
    "\1\210\2\211\14\0\1\54\40\0\3\212\44\0\1\213"+
    "\4\0\2\214\1\212\1\215\1\117\2\120\2\0\1\216"+
    "\4\0\3\217\5\0\1\217\6\0\1\217\15\0\1\220"+
    "\6\0\1\212\1\0\3\120\7\0\3\217\5\0\1\217"+
    "\6\0\1\217\41\0\1\221\3\0\1\221\40\0\3\56"+
    "\65\0\1\206\1\0\1\221\12\0\1\222\10\0\1\223"+
    "\34\0\1\222\3\0\1\222\36\0\1\224\1\0\2\225"+
    "\1\226\14\0\1\54\40\0\3\227\44\0\1\230\4\0"+
    "\2\231\1\227\1\232\2\130\1\131\2\0\1\233\4\0"+
    "\3\234\5\0\1\234\6\0\1\234\15\0\1\235\6\0"+
    "\1\227\1\0\3\131\7\0\3\234\5\0\1\234\6\0"+
    "\1\234\41\0\1\223\3\0\1\223\36\0\1\236\1\0"+
    "\3\237\4\0\6\240\2\0\1\54\40\0\3\241\44\0"+
    "\1\242\4\0\2\243\1\241\1\244\3\135\2\0\1\245"+
    "\1\0\3\136\3\246\5\0\1\247\6\0\1\247\15\0"+
    "\1\250\4\0\2\243\1\0\1\244\3\136\2\0\1\245"+
    "\1\0\6\136\30\0\1\46\2\0\1\46\2\0\1\46"+
    "\2\251\1\252\1\46\4\0\1\46\2\0\31\46\16\0"+
    "\1\50\50\0\1\253\4\0\2\60\2\0\3\141\2\0"+
    "\1\62\4\0\3\144\2\0\1\54\2\0\1\144\6\0"+
    "\1\144\15\0\1\142\4\0\2\60\1\253\1\143\5\0"+
    "\1\62\4\0\3\144\2\0\1\54\2\0\1\144\6\0"+
    "\1\144\26\0\3\254\51\0\2\255\2\0\3\256\44\0"+
    "\1\146\4\0\2\60\7\0\1\62\4\0\3\63\5\0"+
    "\1\63\6\0\1\63\26\0\3\257\44\0\1\260\6\0"+
    "\1\257\1\261\3\150\7\0\3\262\2\0\1\54\2\0"+
    "\1\262\6\0\1\262\15\0\1\263\4\0\2\60\2\0"+
    "\3\151\2\0\1\62\50\0\1\153\1\0\3\154\55\0"+
    "\3\264\44\0\1\265\6\0\1\264\1\266\3\154\7\0"+
    "\3\267\5\0\1\267\6\0\1\267\26\0\3\156\51\0"+
    "\2\60\2\0\3\156\2\0\1\62\37\0\1\4\2\0"+
    "\1\4\2\0\10\4\1\0\1\66\2\0\4\21\1\270"+
    "\24\21\5\0\1\4\2\0\1\4\2\0\10\4\1\0"+
    "\1\66\2\0\10\21\1\271\20\21\5\0\1\4\2\0"+
    "\1\4\2\0\10\4\1\0\1\66\2\0\23\21\1\76"+
    "\5\21\5\0\1\4\2\0\1\4\2\0\10\4\1\0"+
    "\1\66\2\0\4\21\1\76\24\21\5\0\1\4\2\0"+
    "\1\4\2\0\10\4\1\0\1\66\2\0\3\21\1\76"+
    "\16\21\1\272\6\21\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\66\2\0\13\21\1\273\15\21\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\66\2\0"+
    "\1\274\7\21\1\275\20\21\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\66\2\0\1\276\30\21\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\66\2\0"+
    "\10\21\1\277\20\21\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\4\2\0\17\4\1\300\11\4\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\66\2\0"+
    "\1\21\1\301\27\21\5\0\1\4\2\0\1\4\2\0"+
    "\1\302\1\4\1\303\5\4\1\0\1\66\2\0\21\21"+
    "\1\304\7\21\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\66\2\0\1\305\30\21\5\0\1\4\2\0"+
    "\1\4\2\0\10\4\1\0\1\66\2\0\21\21\1\306"+
    "\7\21\5\0\1\4\2\0\1\4\2\0\10\4\1\0"+
    "\1\66\2\0\4\21\1\307\24\21\5\0\1\4\2\0"+
    "\1\4\2\0\10\4\1\0\1\66\2\0\4\21\1\310"+
    "\24\21\5\0\1\4\2\0\1\4\2\0\10\4\1\0"+
    "\1\66\2\0\22\21\1\311\6\21\5\0\1\4\2\0"+
    "\1\4\2\0\10\4\1\0\1\66\2\0\23\21\1\162"+
    "\5\21\5\0\1\4\2\0\1\4\2\0\10\4\1\0"+
    "\1\66\2\0\3\21\1\312\25\21\5\0\1\4\2\0"+
    "\1\4\2\0\10\4\1\0\1\66\2\0\24\21\1\313"+
    "\4\21\5\0\1\302\2\0\1\4\2\0\10\4\1\0"+
    "\1\66\2\0\31\21\5\0\1\4\2\0\1\4\2\0"+
    "\2\4\1\314\5\4\1\0\1\66\2\0\31\21\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\66\2\0"+
    "\15\21\1\315\13\21\14\0\2\115\1\116\1\0\1\117"+
    "\2\120\55\0\3\316\44\0\1\317\4\0\2\214\1\316"+
    "\1\320\1\210\2\211\2\0\1\216\4\0\3\321\2\0"+
    "\1\54\2\0\1\321\6\0\1\321\15\0\1\322\6\0"+
    "\1\316\1\0\3\211\7\0\3\321\5\0\1\321\6\0"+
    "\1\321\15\0\1\323\4\0\2\214\2\0\3\212\2\0"+
    "\1\216\4\0\3\217\5\0\1\217\6\0\1\217\15\0"+
    "\1\213\4\0\2\214\1\323\1\215\5\0\1\216\4\0"+
    "\3\217\5\0\1\217\6\0\1\217\24\0\1\147\1\0"+
    "\1\324\2\325\14\0\1\54\40\0\1\326\53\0\2\327"+
    "\1\153\1\0\1\330\2\331\51\0\2\332\2\0\3\333"+
    "\44\0\1\220\6\0\1\323\13\0\3\217\5\0\1\217"+
    "\6\0\1\217\22\0\2\122\1\123\1\0\3\13\51\0"+
    "\2\126\1\127\1\0\2\130\1\131\51\0\2\133\1\134"+
    "\1\0\3\135\4\0\6\136\43\0\3\334\44\0\1\335"+
    "\4\0\2\231\1\334\1\336\2\225\1\226\2\0\1\233"+
    "\4\0\3\337\2\0\1\54\2\0\1\337\6\0\1\337"+
    "\15\0\1\340\6\0\1\334\1\0\3\226\7\0\3\337"+
    "\5\0\1\337\6\0\1\337\15\0\1\341\4\0\2\231"+
    "\2\0\3\227\2\0\1\233\4\0\3\234\5\0\1\234"+
    "\6\0\1\234\15\0\1\230\4\0\2\231\1\341\1\232"+
    "\5\0\1\233\4\0\3\234\5\0\1\234\6\0\1\234"+
    "\24\0\1\147\1\0\2\342\1\325\14\0\1\54\40\0"+
    "\2\343\52\0\2\344\1\153\1\0\2\345\1\331\51\0"+
    "\2\346\2\0\3\347\44\0\1\235\6\0\1\341\13\0"+
    "\3\234\5\0\1\234\6\0\1\234\26\0\3\350\44\0"+
    "\1\351\4\0\2\243\1\350\1\352\3\237\2\0\1\245"+
    "\1\0\3\240\3\353\2\0\1\54\2\0\1\354\6\0"+
    "\1\354\15\0\1\355\4\0\2\243\1\0\1\352\3\240"+
    "\2\0\1\245\1\0\6\240\2\0\1\54\27\0\1\356"+
    "\4\0\2\243\2\0\3\241\2\0\1\245\4\0\3\247"+
    "\5\0\1\247\6\0\1\247\15\0\1\242\4\0\2\243"+
    "\1\356\1\244\5\0\1\245\4\0\3\247\5\0\1\247"+
    "\6\0\1\247\24\0\1\147\1\0\3\357\4\0\6\360"+
    "\2\0\1\54\40\0\3\361\4\0\6\361\37\0\2\362"+
    "\1\153\1\0\3\363\4\0\6\364\32\0\1\250\4\0"+
    "\2\365\1\0\1\244\3\136\2\0\1\245\1\0\6\136"+
    "\37\0\2\366\2\0\3\367\44\0\1\250\4\0\2\243"+
    "\1\0\1\244\5\0\1\245\44\0\1\47\63\0\1\370"+
    "\50\0\1\253\4\0\2\60\7\0\1\62\4\0\3\144"+
    "\2\0\1\54\2\0\1\144\6\0\1\144\15\0\1\371"+
    "\4\0\2\60\2\0\3\254\2\0\1\62\11\0\1\54"+
    "\40\0\3\256\51\0\2\60\2\0\3\256\2\0\1\62"+
    "\11\0\1\54\27\0\1\372\10\0\3\257\7\0\3\262"+
    "\2\0\1\54\2\0\1\262\6\0\1\262\15\0\1\260"+
    "\6\0\1\372\1\261\12\0\3\262\2\0\1\54\2\0"+
    "\1\262\6\0\1\262\26\0\3\373\51\0\2\374\2\0"+
    "\3\375\44\0\1\263\4\0\2\60\7\0\1\62\41\0"+
    "\1\376\10\0\3\264\7\0\3\267\5\0\1\267\6\0"+
    "\1\267\15\0\1\265\6\0\1\376\1\266\12\0\3\267"+
    "\5\0\1\267\6\0\1\267\26\0\3\377\51\0\2\u0100"+
    "\2\0\3\u0101\42\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\66\2\0\22\21\1\76\6\21\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\66\2\0\15\21"+
    "\1\76\13\21\5\0\1\4\2\0\1\4\2\0\2\4"+
    "\1\u0102\5\4\1\0\1\66\2\0\31\21\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\66\2\0\1\u0103"+
    "\30\21\5\0\1\4\2\0\1\4\2\0\10\4\1\0"+
    "\1\66\2\0\24\21\1\u0104\4\21\5\0\1\4\2\0"+
    "\1\4\2\0\10\4\1\0\1\66\2\0\15\21\1\u0105"+
    "\13\21\5\0\1\4\2\0\1\4\2\0\10\4\1\0"+
    "\1\66\2\0\30\21\1\76\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\66\2\0\3\21\1\u0106\25\21"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\4"+
    "\2\0\1\u0107\30\4\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\66\2\0\3\21\1\u0108\25\21\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\4\2\0"+
    "\22\4\1\u0109\6\4\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\66\2\0\4\21\1\u010a\24\21\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\66\2\0"+
    "\13\21\1\u010b\15\21\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\66\2\0\16\21\1\76\12\21\5\0"+
    "\1\4\2\0\1\4\2\0\2\4\1\u010c\5\4\1\0"+
    "\1\66\2\0\31\21\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\66\2\0\3\21\1\u010d\25\21\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\66\2\0"+
    "\10\21\1\u010e\20\21\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\66\2\0\4\21\1\u010f\24\21\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\66\2\0"+
    "\4\21\1\u0110\24\21\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\4\2\0\4\4\1\u0111\24\4\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\66\2\0"+
    "\6\21\1\u0112\22\21\7\0\1\u0113\4\0\2\214\2\0"+
    "\3\316\2\0\1\216\4\0\3\321\2\0\1\54\2\0"+
    "\1\321\6\0\1\321\15\0\1\317\4\0\2\214\1\u0113"+
    "\1\320\5\0\1\216\4\0\3\321\2\0\1\54\2\0"+
    "\1\321\6\0\1\321\26\0\1\u0114\53\0\2\u0115\2\0"+
    "\3\u0116\44\0\1\322\6\0\1\u0113\13\0\3\321\5\0"+
    "\1\321\6\0\1\321\15\0\1\323\4\0\2\214\7\0"+
    "\1\216\4\0\3\217\5\0\1\217\6\0\1\217\15\0"+
    "\1\u0117\6\0\1\257\1\u0118\1\324\2\325\7\0\3\262"+
    "\2\0\1\54\2\0\1\262\6\0\1\262\15\0\1\u0119"+
    "\6\0\1\257\1\0\3\325\7\0\3\262\5\0\1\262"+
    "\6\0\1\262\15\0\1\u011a\4\0\2\214\2\0\1\326"+
    "\4\0\1\216\50\0\1\153\1\0\1\330\2\331\44\0"+
    "\1\u011b\6\0\1\264\1\u011c\1\330\2\331\7\0\3\267"+
    "\5\0\1\267\6\0\1\267\15\0\1\u011d\6\0\1\264"+
    "\1\0\3\331\7\0\3\267\5\0\1\267\6\0\1\267"+
    "\26\0\3\333\51\0\2\214\2\0\3\333\2\0\1\216"+
    "\41\0\1\u011e\4\0\2\231\2\0\3\334\2\0\1\233"+
    "\4\0\3\337\2\0\1\54\2\0\1\337\6\0\1\337"+
    "\15\0\1\335\4\0\2\231\1\u011e\1\336\5\0\1\233"+
    "\4\0\3\337\2\0\1\54\2\0\1\337\6\0\1\337"+
    "\26\0\2\u011f\52\0\2\u0120\2\0\3\u0121\44\0\1\340"+
    "\6\0\1\u011e\13\0\3\337\5\0\1\337\6\0\1\337"+
    "\15\0\1\341\4\0\2\231\7\0\1\233\4\0\3\234"+
    "\5\0\1\234\6\0\1\234\15\0\1\u0122\6\0\1\257"+
    "\1\u0123\2\342\1\325\7\0\3\262\2\0\1\54\2\0"+
    "\1\262\6\0\1\262\15\0\1\u0124\4\0\2\231\2\0"+
    "\2\343\3\0\1\233\50\0\1\153\1\0\2\345\1\331"+
    "\44\0\1\u0125\6\0\1\264\1\u0126\2\345\1\331\7\0"+
    "\3\267\5\0\1\267\6\0\1\267\26\0\3\347\51\0"+
    "\2\231\2\0\3\347\2\0\1\233\41\0\1\u0127\4\0"+
    "\2\243\2\0\3\350\2\0\1\245\4\0\3\354\2\0"+
    "\1\54\2\0\1\354\6\0\1\354\15\0\1\351\4\0"+
    "\2\243\1\u0127\1\352\5\0\1\245\4\0\3\354\2\0"+
    "\1\54\2\0\1\354\6\0\1\354\26\0\3\u0128\4\0"+
    "\6\u0128\32\0\1\355\4\0\2\365\1\0\1\352\3\240"+
    "\2\0\1\245\1\0\6\240\2\0\1\54\34\0\2\u0129"+
    "\2\0\3\u012a\44\0\1\355\4\0\2\243\1\0\1\352"+
    "\5\0\1\245\11\0\1\54\27\0\1\356\4\0\2\243"+
    "\7\0\1\245\4\0\3\247\5\0\1\247\6\0\1\247"+
    "\15\0\1\u012b\6\0\1\257\1\u012c\3\357\4\0\3\360"+
    "\3\u012d\2\0\1\54\2\0\1\262\6\0\1\262\15\0"+
    "\1\u012e\7\0\1\u012c\3\360\4\0\6\360\2\0\1\54"+
    "\27\0\1\u012f\4\0\2\243\2\0\3\361\2\0\1\245"+
    "\1\0\6\361\41\0\1\153\1\0\3\363\4\0\6\364"+
    "\32\0\1\u0130\6\0\1\264\1\u0131\3\363\4\0\3\364"+
    "\3\u0132\5\0\1\267\6\0\1\267\15\0\1\u0133\7\0"+
    "\1\u0131\3\364\4\0\6\364\41\0\1\147\1\0\3\u0134"+
    "\4\0\6\360\2\0\1\54\40\0\3\367\51\0\2\243"+
    "\2\0\3\367\2\0\1\245\37\0\1\46\2\0\1\46"+
    "\1\0\1\47\1\46\2\50\1\u0135\1\46\4\0\1\46"+
    "\2\0\31\46\7\0\1\371\4\0\2\60\7\0\1\62"+
    "\11\0\1\54\27\0\1\372\22\0\3\262\2\0\1\54"+
    "\2\0\1\262\6\0\1\262\15\0\1\u0136\10\0\3\373"+
    "\14\0\1\54\40\0\3\375\55\0\3\375\14\0\1\54"+
    "\27\0\1\376\22\0\3\267\5\0\1\267\6\0\1\267"+
    "\15\0\1\u0137\10\0\3\377\55\0\3\u0101\42\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\4\2\0\22\4"+
    "\1\u0138\6\4\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\66\2\0\21\21\1\162\7\21\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\66\2\0\13\21"+
    "\1\u0139\15\21\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\66\2\0\4\21\1\u013a\24\21\5\0\1\4"+
    "\2\0\1\4\2\0\2\4\1\u013b\5\4\1\0\1\66"+
    "\2\0\31\21\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\4\2\0\2\4\1\u013c\26\4\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\66\2\0\1\76"+
    "\30\21\5\0\1\4\2\0\1\4\2\0\10\4\1\0"+
    "\1\4\2\0\30\4\1\u013d\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\66\2\0\2\21\1\76\26\21"+
    "\5\0\1\4\2\0\1\4\2\0\2\4\1\u013e\5\4"+
    "\1\0\1\66\2\0\31\21\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\4\2\0\4\4\1\u013f\24\4"+
    "\5\0\1\4\2\0\1\4\2\0\2\4\1\u0140\5\4"+
    "\1\0\1\66\2\0\31\21\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\66\2\0\20\21\1\u0141\10\21"+
    "\5\0\1\4\2\0\1\4\2\0\2\4\1\u0142\5\4"+
    "\1\0\1\66\2\0\31\21\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\66\2\0\15\21\1\u0143\13\21"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\4"+
    "\2\0\15\4\1\u0144\13\4\5\0\1\4\2\0\1\4"+
    "\2\0\2\4\1\303\5\4\1\0\1\66\2\0\31\21"+
    "\7\0\1\u0113\4\0\2\214\7\0\1\216\4\0\3\321"+
    "\2\0\1\54\2\0\1\321\6\0\1\321\15\0\1\u0145"+
    "\4\0\2\214\2\0\1\u0114\4\0\1\216\11\0\1\54"+
    "\40\0\3\u0116\51\0\2\214\2\0\3\u0116\2\0\1\216"+
    "\11\0\1\54\27\0\1\u0117\6\0\1\372\1\u0118\12\0"+
    "\3\262\2\0\1\54\2\0\1\262\6\0\1\262\26\0"+
    "\1\u0146\46\0\1\u0119\6\0\1\372\13\0\3\262\5\0"+
    "\1\262\6\0\1\262\15\0\1\u011a\4\0\2\214\7\0"+
    "\1\216\41\0\1\u011b\6\0\1\376\1\u011c\12\0\3\267"+
    "\5\0\1\267\6\0\1\267\26\0\1\u0147\46\0\1\u011d"+
    "\6\0\1\376\13\0\3\267\5\0\1\267\6\0\1\267"+
    "\15\0\1\u011e\4\0\2\231\7\0\1\233\4\0\3\337"+
    "\2\0\1\54\2\0\1\337\6\0\1\337\15\0\1\u0148"+
    "\4\0\2\231\2\0\2\u011f\3\0\1\233\11\0\1\54"+
    "\40\0\3\u0121\51\0\2\231\2\0\3\u0121\2\0\1\233"+
    "\11\0\1\54\27\0\1\u0122\6\0\1\372\1\u0123\12\0"+
    "\3\262\2\0\1\54\2\0\1\262\6\0\1\262\26\0"+
    "\2\u0149\45\0\1\u0124\4\0\2\231\7\0\1\233\41\0"+
    "\1\u0125\6\0\1\376\1\u0126\12\0\3\267\5\0\1\267"+
    "\6\0\1\267\26\0\2\u014a\45\0\1\u0127\4\0\2\243"+
    "\7\0\1\245\4\0\3\354\2\0\1\54\2\0\1\354"+
    "\6\0\1\354\15\0\1\u014b\4\0\2\243\2\0\3\u0128"+
    "\2\0\1\245\1\0\6\u0128\2\0\1\54\40\0\3\u012a"+
    "\51\0\2\243\2\0\3\u012a\2\0\1\245\11\0\1\54"+
    "\27\0\1\u012b\6\0\1\372\1\u012c\12\0\3\262\2\0"+
    "\1\54\2\0\1\262\6\0\1\262\26\0\3\u014c\4\0"+
    "\6\u014c\32\0\1\u012e\4\0\2\374\1\0\1\u012c\3\360"+
    "\4\0\6\360\2\0\1\54\27\0\1\u012e\7\0\1\u012c"+
    "\17\0\1\54\27\0\1\u012f\4\0\2\243\7\0\1\245"+
    "\41\0\1\u0130\6\0\1\376\1\u0131\12\0\3\267\5\0"+
    "\1\267\6\0\1\267\26\0\3\u014d\4\0\6\u014d\32\0"+
    "\1\u0133\4\0\2\u0100\1\0\1\u0131\3\364\4\0\6\364"+
    "\32\0\1\u0133\7\0\1\u0131\47\0\1\u012b\4\0\2\243"+
    "\1\257\1\u012c\3\u0134\2\0\1\245\1\0\3\360\3\u012d"+
    "\2\0\1\54\2\0\1\262\6\0\1\262\13\0\1\46"+
    "\2\0\1\46\1\0\1\47\1\46\2\251\1\252\1\46"+
    "\4\0\1\46\2\0\31\46\7\0\1\u0136\27\0\1\54"+
    "\27\0\1\u0137\55\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\4\2\0\23\4\1\u014e\5\4\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\66\2\0\23\21"+
    "\1\u014f\5\21\5\0\1\4\2\0\1\4\2\0\2\4"+
    "\1\u0150\5\4\1\0\1\66\2\0\31\21\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\4\2\0\23\4"+
    "\1\u0151\5\4\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\4\2\0\12\4\1\u0152\16\4\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\4\2\0\15\4"+
    "\1\u0153\13\4\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\4\2\0\3\4\1\u0154\25\4\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\4\2\0\15\4"+
    "\1\u0155\13\4\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\4\2\0\13\4\1\u0156\15\4\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\66\2\0\24\21"+
    "\1\u0157\4\21\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\4\2\0\20\4\1\u0158\10\4\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\66\2\0\2\21"+
    "\1\162\26\21\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\4\2\0\25\4\1\u0159\3\4\7\0\1\u0145"+
    "\4\0\2\214\7\0\1\216\11\0\1\54\27\0\1\u0136"+
    "\10\0\1\u0146\16\0\1\54\27\0\1\u0137\10\0\1\u0147"+
    "\46\0\1\u0148\4\0\2\231\7\0\1\233\11\0\1\54"+
    "\27\0\1\u0136\10\0\2\u0149\15\0\1\54\27\0\1\u0137"+
    "\10\0\2\u014a\45\0\1\u014b\4\0\2\243\7\0\1\245"+
    "\11\0\1\54\27\0\1\u0136\10\0\3\u014c\4\0\6\u014c"+
    "\2\0\1\54\27\0\1\u0137\10\0\3\u014d\4\0\6\u014d"+
    "\30\0\1\4\2\0\1\4\2\0\10\4\1\0\1\4"+
    "\2\0\21\4\1\u015a\7\4\5\0\1\4\2\0\1\4"+
    "\2\0\2\4\1\u015b\5\4\1\0\1\66\2\0\31\21"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\4"+
    "\2\0\10\4\1\u015c\3\4\1\u015d\5\4\1\u015e\6\4"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\4"+
    "\2\0\4\4\1\u015f\24\4\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\4\2\0\1\u0160\30\4\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\4\2\0"+
    "\23\4\1\u0161\5\4\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\4\2\0\4\4\1\u0162\24\4\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\4\2\0"+
    "\25\4\1\u0163\3\4\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\4\2\0\1\u0164\30\4\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\66\2\0\16\21"+
    "\1\200\12\21\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\4\2\0\24\4\1\u0165\4\4\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\4\2\0\10\4"+
    "\1\u0166\20\4\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\4\2\0\4\4\1\u0167\24\4\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\4\2\0\16\4"+
    "\1\u0168\12\4\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\4\2\0\15\4\1\u0169\13\4\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\4\2\0\1\u016a"+
    "\30\4\5\0\1\4\2\0\1\4\2\0\10\4\1\0"+
    "\1\4\2\0\23\4\1\u016b\4\4\1\u013d\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\4\2\0\22\4"+
    "\1\u016c\6\4\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\4\2\0\6\4\1\u016d\22\4\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\4\2\0\1\u016e"+
    "\30\4\5\0\1\4\2\0\1\4\2\0\10\4\1\0"+
    "\1\4\2\0\2\4\1\u016f\26\4\5\0\1\4\2\0"+
    "\1\4\2\0\10\4\1\0\1\4\2\0\10\4\1\u0170"+
    "\20\4\5\0\1\4\2\0\1\4\2\0\10\4\1\0"+
    "\1\4\2\0\14\4\1\u0171\14\4\5\0\1\4\2\0"+
    "\1\4\2\0\10\4\1\0\1\4\2\0\16\4\1\u0172"+
    "\12\4\5\0\1\4\2\0\1\4\2\0\10\4\1\0"+
    "\1\4\2\0\21\4\1\u0173\7\4\5\0\1\4\2\0"+
    "\1\4\2\0\10\4\1\0\1\4\2\0\1\u0174\30\4"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\4"+
    "\2\0\1\4\1\u0175\27\4\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\4\2\0\23\4\1\u0176\5\4"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\4"+
    "\2\0\2\4\1\u0177\26\4\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\4\2\0\21\4\1\u0178\7\4"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\4"+
    "\2\0\23\4\1\302\5\4\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\4\2\0\4\4\1\302\24\4"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\4"+
    "\2\0\27\4\1\302\1\4\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\4\2\0\13\4\1\u0179\15\4"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\4"+
    "\2\0\16\4\1\u017a\12\4\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\4\2\0\1\4\1\u017b\27\4"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\4"+
    "\2\0\23\4\1\u016d\5\4\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\4\2\0\16\4\1\u017c\12\4"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\4"+
    "\2\0\14\4\1\302\14\4\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\4\2\0\11\4\1\u017d\17\4"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\4"+
    "\2\0\4\4\1\u017e\24\4\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\4\2\0\21\4\1\u017f\7\4"+
    "\5\0\1\4\2\0\1\4\2\0\10\4\1\0\1\4"+
    "\2\0\24\4\1\u0180\4\4\5\0\1\4\2\0\1\4"+
    "\2\0\10\4\1\0\1\4\2\0\1\u0181\30\4\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\4\2\0"+
    "\21\4\1\u017c\7\4\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\4\2\0\3\4\1\u0182\25\4\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\4\2\0"+
    "\14\4\1\u0183\14\4\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\4\2\0\4\4\1\u0184\24\4\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\4\2\0"+
    "\6\4\1\u0185\22\4\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\4\2\0\16\4\1\302\12\4\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\4\2\0"+
    "\2\4\1\u0186\26\4\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\4\2\0\21\4\1\u016d\7\4\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\4\2\0"+
    "\1\302\30\4\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\4\2\0\4\4\1\u0187\24\4\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\4\2\0\2\4"+
    "\1\u0188\26\4\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\4\2\0\21\4\1\u0189\7\4\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\4\2\0\23\4"+
    "\1\u018a\5\4\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\4\2\0\15\4\1\u016c\13\4\5\0\1\4"+
    "\2\0\1\4\2\0\10\4\1\0\1\4\2\0\23\4"+
    "\1\u018b\5\4\5\0\1\4\2\0\1\4\2\0\10\4"+
    "\1\0\1\4\2\0\1\u018c\30\4\5\0\1\4\2\0"+
    "\1\4\2\0\10\4\1\0\1\4\2\0\24\4\1\u0181"+
    "\4\4\5\0\1\4\2\0\1\4\2\0\10\4\1\0"+
    "\1\302\2\0\31\4\5\0\1\4\2\0\1\4\2\0"+
    "\10\4\1\0\1\4\2\0\1\4\1\u018d\27\4\5\0"+
    "\1\4\2\0\1\4\2\0\10\4\1\0\1\4\2\0"+
    "\13\4\1\u016d\15\4\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18336];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\5\1\1\11\23\1\1\0\1\11\5\0"+
    "\1\11\3\0\1\11\3\0\1\1\1\11\1\0\2\1"+
    "\5\0\1\11\25\1\1\11\3\0\1\1\10\0\1\1"+
    "\4\0\2\1\2\0\2\1\2\0\1\11\1\1\2\0"+
    "\1\1\2\0\1\1\1\0\30\1\2\0\1\1\1\0"+
    "\2\1\11\0\1\1\1\0\2\1\6\0\4\1\3\0"+
    "\1\1\1\0\1\1\2\0\2\1\1\0\1\1\4\0"+
    "\3\1\2\0\30\1\3\0\1\1\2\0\1\1\1\0"+
    "\1\1\2\0\3\1\3\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\2\1\2\0"+
    "\1\1\1\0\2\1\2\0\1\1\1\0\1\1\4\0"+
    "\2\1\1\0\24\1\1\0\1\1\3\0\2\1\2\0"+
    "\2\1\1\0\1\1\2\0\2\1\1\0\2\1\1\0"+
    "\1\1\4\0\2\1\1\0\3\1\2\0\17\1\1\0"+
    "\2\1\1\0\2\1\1\0\101\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scheme_lex_scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 14: break;
          case 2:
            { System.out.print(yytext());
            }
            // fall through
          case 15: break;
          case 3:
            { System.out.print("ID["+ yytext()+"]");
            }
            // fall through
          case 16: break;
          case 4:
            { System.out.print("INITP["+yytext()+"]");
            }
            // fall through
          case 17: break;
          case 5:
            { System.out.print("ENDP["+yytext()+"]");
            }
            // fall through
          case 18: break;
          case 6:
            { System.out.print("NUM["+yytext()+"]");
            }
            // fall through
          case 19: break;
          case 7:
            { System.out.print("STR["+ yytext()+"]");
            }
            // fall through
          case 20: break;
          case 8:
            { System.out.print("BOOL["+ yytext()+"]");
            }
            // fall through
          case 21: break;
          case 9:
            { System.out.print("FRML["+ yytext()+"]");
            }
            // fall through
          case 22: break;
          case 10:
            { System.out.print("COMNT["+ yytext()+"]");
            }
            // fall through
          case 23: break;
          case 11:
            { System.out.print("DJNT["+yytext()+"]");
            }
            // fall through
          case 24: break;
          case 12:
            { System.out.print("KWRD[" + yytext()+"]");
            }
            // fall through
          case 25: break;
          case 13:
            { System.out.print("CONS["+ yytext()+"]");
            }
            // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java scheme_lex_scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        scheme_lex_scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new scheme_lex_scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
